# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ay625DnJa7NGYXZNKzAJoyGVeEJRcrpj
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn import linear_model
import numpy as np

data = pd.read_csv('https://raw.githubusercontent.com/mk-gurucharan/Regression/master/IceCreamData.csv')
#This dataset is collected from the ice-cream parlor in which their revenue will depend on the temperature outside
#The dataset should only be in the ".csv" format import and store the dataset in a variable using pandas method of read_csv()

data
#print the data for checking

data.describe()
#It will provide the following data of dataset

data.ndim
#ndim is a numpy module which gives the dimension of the dataset

data.shape
#.shape method print "no.of rows * no.of coloums"

data.plot(kind='scatter', x='Temperature',y='Revenue')
#plot the graph in a scattered pattern
plt.show()
#plt is a matlabs module It will display the graph

data.plot(kind='line')
#Just changing the graph to box pattern like candle graph in stock market
plt.show()

data.corr()

temp = pd.DataFrame(data['Temperature'])
#Seperating the temperature values from the dataset and storing it in the temp variable using DataFrame which is a pandas library method
rev = pd.DataFrame(data['Revenue'])
#Seperating the revenue values from the dataset and storing it in the temp variable using DataFrame which is a pandas library method

temp
#printing the rev variable to check the data

model = linear_model.LinearRegression()
#sklearn is a important library in machine learning 
result = model.fit(temp,rev)
#using the Method LinearRegression we are training the algorithm

result.coef_
#It is basically a theta0 value

result.intercept_
#It is basically a theta1 value

result.score(temp,rev)
#The method score will give us the accuracy of the trained algorithm 
# NOTE:: Finalize it only after getting more than 95% of accuracy

#checking the system output values using known input value which is the 2nd index in the data array
#Here we are checking the closeness of the found out value with the known value the 
test_temp = np.array([[27.790554]])
test_temp.reshape(-1,1)
rev_result = result.predict(test_temp)
rev_result
#The output we got is 640.7614998 
#Find the accuray (640.7614998*100)/	660.632289

final_result = (640.7614998*100)/	660.632289
print(final_result)
#which is approximately 97%

#Hence the system is of having 97% accuracy the accuray can vary based on the quality of dataset provided

#........................................completed.................................................................